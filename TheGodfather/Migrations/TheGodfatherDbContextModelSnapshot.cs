// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TheGodfather.Database;

namespace TheGodfather.Migrations
{
    [DbContext(typeof(TheGodfatherDbContext))]
    partial class TheGodfatherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gf")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TheGodfather.Database.Models.ActionHistoryEntry", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamptz")
                        .HasColumnName("execution_time");

                    b.Property<long?>("GuildConfigGuildIdDb")
                        .HasColumnType("bigint");

                    b.Property<string>("NotesDb")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("notes");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.HasKey("GuildIdDb", "UserIdDb", "Time");

                    b.HasIndex("GuildConfigGuildIdDb");

                    b.ToTable("action_history");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.AutoRole", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("RoleIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("rid");

                    b.HasKey("GuildIdDb", "RoleIdDb");

                    b.ToTable("auto_roles");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.BankAccount", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint")
                        .HasColumnName("balance");

                    b.HasKey("GuildIdDb", "UserIdDb");

                    b.ToTable("bank_accounts");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Birthday", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("ChannelIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("cid");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("LastUpdateYear")
                        .HasColumnType("integer")
                        .HasColumnName("last_update_year");

                    b.HasKey("GuildIdDb", "ChannelIdDb", "UserIdDb");

                    b.ToTable("birthdays");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.BlockedChannel", b =>
                {
                    b.Property<long>("IdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Reason")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("reason");

                    b.HasKey("IdDb");

                    b.ToTable("blocked_channels");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.BlockedGuild", b =>
                {
                    b.Property<long>("IdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Reason")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("reason");

                    b.HasKey("IdDb");

                    b.ToTable("blocked_guilds");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.BlockedUser", b =>
                {
                    b.Property<long>("IdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Reason")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("reason");

                    b.HasKey("IdDb");

                    b.ToTable("blocked_users");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.BotStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Activity")
                        .HasColumnType("integer")
                        .HasColumnName("activity_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("bot_statuses");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Chicken", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.Property<int>("BareMaxVitality")
                        .HasColumnType("integer")
                        .HasColumnName("max_vit");

                    b.Property<int>("BareStrength")
                        .HasColumnType("integer")
                        .HasColumnName("str");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<int>("Vitality")
                        .HasColumnType("integer")
                        .HasColumnName("vit");

                    b.HasKey("GuildIdDb", "UserIdDb");

                    b.ToTable("chickens");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ChickenBoughtUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.HasKey("Id", "GuildIdDb", "UserIdDb");

                    b.HasIndex("GuildIdDb", "UserIdDb");

                    b.ToTable("chicken_bought_upgrades");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ChickenUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Cost")
                        .HasColumnType("bigint")
                        .HasColumnName("cost");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("mod");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<int>("UpgradesStat")
                        .HasColumnType("integer")
                        .HasColumnName("stat");

                    b.HasKey("Id");

                    b.ToTable("chicken_upgrades");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.CommandRule", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("ChannelIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("cid");

                    b.Property<string>("Command")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("command");

                    b.Property<bool>("Allowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allow");

                    b.HasKey("GuildIdDb", "ChannelIdDb", "Command");

                    b.ToTable("cmd_rules");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.EmojiReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("reaction");

                    b.HasKey("Id");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("reactions_emoji");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.EmojiReactionTrigger", b =>
                {
                    b.Property<int>("ReactionId")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Trigger")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("trigger");

                    b.HasKey("ReactionId", "Trigger");

                    b.ToTable("reactions_emoji_triggers");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedBackupEntity", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("ChannelIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("cid");

                    b.HasKey("GuildIdDb", "ChannelIdDb");

                    b.ToTable("exempt_backup");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedLoggingEntity", b =>
                {
                    b.Property<long>("IdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("xid");

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("IdDb", "GuildIdDb", "Type");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("exempt_logging");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedMentionEntity", b =>
                {
                    b.Property<long>("IdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("xid");

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("IdDb", "GuildIdDb", "Type");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("exempt_mention");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedRatelimitEntity", b =>
                {
                    b.Property<long>("IdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("xid");

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("IdDb", "GuildIdDb", "Type");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("exempt_ratelimit");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedSpamEntity", b =>
                {
                    b.Property<long>("IdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("xid");

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("IdDb", "GuildIdDb", "Type");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("exempt_antispam");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<string>("RegexString")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("trigger");

                    b.HasKey("Id");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("filters");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ForbiddenName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte?>("ActionOverride")
                        .HasColumnType("smallint")
                        .HasColumnName("action");

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<string>("RegexString")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name_regex");

                    b.HasKey("Id");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("forbidden_names");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.GameStats", b =>
                {
                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.Property<int>("AnimalRacesWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ar_won");

                    b.Property<int>("CaroLost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("caro_lost");

                    b.Property<int>("CaroWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("caro_won");

                    b.Property<int>("Connect4Lost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("c4_lost");

                    b.Property<int>("Connect4Won")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("c4_won");

                    b.Property<int>("DuelsLost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("duel_lost");

                    b.Property<int>("DuelsWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("duel_won");

                    b.Property<int>("HangmanWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("hangman_won");

                    b.Property<int>("NumberRacesWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("nr_won");

                    b.Property<int>("OthelloLost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("othello_lost");

                    b.Property<int>("OthelloWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("othello_won");

                    b.Property<int>("QuizWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quiz_won");

                    b.Property<int>("RussianRoulettesWon")
                        .HasColumnType("integer")
                        .HasColumnName("rr_won");

                    b.Property<int>("TicTacToeLost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ttt_lost");

                    b.Property<int>("TicTacToeWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ttt_won");

                    b.Property<int>("TypingRacesWon")
                        .HasColumnType("integer")
                        .HasColumnName("tr_won");

                    b.HasKey("UserIdDb");

                    b.ToTable("game_stats");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.GuildConfig", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<bool>("ActionHistoryEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("action_history_enabled");

                    b.Property<short>("AntiInstantLeaveCooldown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)3)
                        .HasColumnName("antiinstantleave_cooldown");

                    b.Property<bool>("AntiInstantLeaveEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("antiinstantleave_enabled");

                    b.Property<byte>("AntiMentionAction")
                        .HasColumnType("smallint")
                        .HasColumnName("antimention_action");

                    b.Property<bool>("AntiMentionEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("antimention_enabled");

                    b.Property<short>("AntiMentionSensitivity")
                        .HasColumnType("smallint")
                        .HasColumnName("antimention_sensitivity");

                    b.Property<byte>("AntifloodAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)4)
                        .HasColumnName("antiflood_action");

                    b.Property<short>("AntifloodCooldown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)10)
                        .HasColumnName("antiflood_cooldown");

                    b.Property<bool>("AntifloodEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("antiflood_enabled");

                    b.Property<short>("AntifloodSensitivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)5)
                        .HasColumnName("antiflood_sensitivity");

                    b.Property<byte>("AntispamAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("antispam_action");

                    b.Property<bool>("AntispamEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("antispam_enabled");

                    b.Property<short>("AntispamSensitivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)5)
                        .HasColumnName("antispam_sensitivity");

                    b.Property<bool>("BackupEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("backup");

                    b.Property<string>("Currency")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("currency");

                    b.Property<long>("LeaveChannelIdDb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("leave_cid");

                    b.Property<string>("LeaveMessage")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("leave_msg");

                    b.Property<bool>("LinkfilterBootersEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("linkfilter_booters");

                    b.Property<bool>("LinkfilterDiscordInvitesEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("linkfilter_invites");

                    b.Property<bool>("LinkfilterDisturbingWebsitesEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("linkfilter_disturbing");

                    b.Property<bool>("LinkfilterEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("linkfilter_enabled");

                    b.Property<bool>("LinkfilterIpLoggersEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("linkfilter_loggers");

                    b.Property<bool>("LinkfilterUrlShortenersEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("linkfilter_shorteners");

                    b.Property<string>("Locale")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("locale");

                    b.Property<long>("LogChannelIdDb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("log_cid");

                    b.Property<long>("MuteRoleIdDb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mute_rid");

                    b.Property<string>("Prefix")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("prefix");

                    b.Property<byte>("RatelimitAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("ratelimit_action");

                    b.Property<bool>("RatelimitEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ratelimit_enabled");

                    b.Property<short>("RatelimitSensitivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)5)
                        .HasColumnName("ratelimit_sensitivity");

                    b.Property<bool>("ReactionResponse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("silent_response_enabled");

                    b.Property<bool>("SilentLevelUpEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("silent_levelup_enabled");

                    b.Property<long>("StarboardChannelIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("starboard_cid");

                    b.Property<string>("StarboardEmoji")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("starboard_emoji");

                    b.Property<int>("StarboardSensitivity")
                        .HasColumnType("integer")
                        .HasColumnName("starboard_sens");

                    b.Property<bool>("SuggestionsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("suggestions_enabled");

                    b.Property<string>("TimezoneId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("timezone_id");

                    b.Property<long>("WelcomeChannelIdDb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("welcome_cid");

                    b.Property<string>("WelcomeMessage")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("welcome_msg");

                    b.HasKey("GuildIdDb");

                    b.ToTable("guild_cfg");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.GuildTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("ExecutionTime")
                        .HasColumnType("timestamptz")
                        .HasColumnName("execution_time");

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long?>("RoleIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("rid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.HasKey("Id");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("scheduled_tasks");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.LevelRole", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint")
                        .HasColumnName("rank");

                    b.Property<long>("RoleIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("rid");

                    b.HasKey("GuildIdDb", "Rank");

                    b.ToTable("level_roles");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Meme", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("url");

                    b.HasKey("GuildIdDb", "Name");

                    b.ToTable("memes");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.PrivilegedUser", b =>
                {
                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.HasKey("UserIdDb");

                    b.ToTable("privileged_users");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Punishment", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("action");

                    b.HasKey("GuildIdDb", "UserIdDb", "Type");

                    b.ToTable("punishments");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.PurchasableItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("purchasable_items");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.PurchasedItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.HasKey("ItemId", "UserIdDb");

                    b.ToTable("purchased_items");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ReactionRole", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<string>("Emoji")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("emoji");

                    b.Property<long>("ChannelIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("cid");

                    b.Property<long>("MessageIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("mid");

                    b.Property<long>("RoleIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("rid");

                    b.HasKey("GuildIdDb", "Emoji", "ChannelIdDb", "MessageIdDb");

                    b.ToTable("reaction_roles");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ChannelIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("cid");

                    b.Property<DateTimeOffset>("ExecutionTime")
                        .HasColumnType("timestamptz")
                        .HasColumnName("execution_time");

                    b.Property<bool>("IsRepeating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_repeating");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("message");

                    b.Property<TimeSpan?>("RepeatIntervalDb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("interval")
                        .HasDefaultValue(new TimeSpan(0, 0, 0, 0, -1))
                        .HasColumnName("repeat_interval");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.HasKey("Id");

                    b.ToTable("reminders");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.RssFeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("LastPostUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("last_post_url");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("rss_feeds");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.RssSubscription", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("ChannelIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("cid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id", "GuildIdDb", "ChannelIdDb");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("rss_subscriptions");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.SelfRole", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("RoleIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("rid");

                    b.HasKey("GuildIdDb", "RoleIdDb");

                    b.ToTable("self_roles");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.StarboardMessage", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("ChannelIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("cid");

                    b.Property<long>("MessageIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("mid");

                    b.Property<long>("StarMessageIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("smid");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("stars");

                    b.HasKey("GuildIdDb", "ChannelIdDb", "MessageIdDb");

                    b.ToTable("starboard");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.TextReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("reaction");

                    b.HasKey("Id");

                    b.HasIndex("GuildIdDb");

                    b.ToTable("reactions_text");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.TextReactionTrigger", b =>
                {
                    b.Property<int>("ReactionId")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Trigger")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("trigger");

                    b.HasKey("ReactionId", "Trigger");

                    b.ToTable("reactions_text_triggers");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.XpCount", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<long>("UserIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("uid");

                    b.Property<int>("Xp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("xp");

                    b.HasKey("GuildIdDb", "UserIdDb");

                    b.ToTable("xp_count");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.XpRank", b =>
                {
                    b.Property<long>("GuildIdDb")
                        .HasColumnType("bigint")
                        .HasColumnName("gid");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint")
                        .HasColumnName("rank");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("GuildIdDb", "Rank");

                    b.ToTable("guild_ranks");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ActionHistoryEntry", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", null)
                        .WithMany("ActionHistory")
                        .HasForeignKey("GuildConfigGuildIdDb");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.AutoRole", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("AutoRoles")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.BankAccount", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("Accounts")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Birthday", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("Birthdays")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Chicken", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("Chickens")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ChickenBoughtUpgrade", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", null)
                        .WithMany("ChickenBoughtUpgrades")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGodfather.Database.Models.ChickenUpgrade", "Upgrade")
                        .WithMany("BoughtUpgrades")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGodfather.Database.Models.Chicken", "Chicken")
                        .WithMany("Upgrades")
                        .HasForeignKey("GuildIdDb", "UserIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chicken");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.CommandRule", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("CommandRules")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.EmojiReaction", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("EmojiReactions")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.EmojiReactionTrigger", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.EmojiReaction", "Reaction")
                        .WithMany("DbTriggers")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedBackupEntity", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany()
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedLoggingEntity", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("ExemptsLogging")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedMentionEntity", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("ExemptsMention")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedRatelimitEntity", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("ExemptsRatelimit")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ExemptedSpamEntity", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("ExemptsSpam")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Filter", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("Filters")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ForbiddenName", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("ForbiddenNames")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.GuildTask", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("GuildTasks")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.LevelRole", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany()
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Meme", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("Memes")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.PurchasableItem", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("PurchasableItems")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.PurchasedItem", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.PurchasableItem", "Item")
                        .WithMany("Purchases")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ReactionRole", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany()
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.RssSubscription", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("Subscriptions")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGodfather.Database.Models.RssFeed", "Feed")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.SelfRole", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("SelfRoles")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.StarboardMessage", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany()
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.TextReaction", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("TextReactions")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.TextReactionTrigger", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.TextReaction", "Reaction")
                        .WithMany("DbTriggers")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.XpRank", b =>
                {
                    b.HasOne("TheGodfather.Database.Models.GuildConfig", "GuildConfig")
                        .WithMany("Ranks")
                        .HasForeignKey("GuildIdDb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfig");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.Chicken", b =>
                {
                    b.Navigation("Upgrades");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.ChickenUpgrade", b =>
                {
                    b.Navigation("BoughtUpgrades");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.EmojiReaction", b =>
                {
                    b.Navigation("DbTriggers");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.GuildConfig", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ActionHistory");

                    b.Navigation("AutoRoles");

                    b.Navigation("Birthdays");

                    b.Navigation("ChickenBoughtUpgrades");

                    b.Navigation("Chickens");

                    b.Navigation("CommandRules");

                    b.Navigation("EmojiReactions");

                    b.Navigation("ExemptsLogging");

                    b.Navigation("ExemptsMention");

                    b.Navigation("ExemptsRatelimit");

                    b.Navigation("ExemptsSpam");

                    b.Navigation("Filters");

                    b.Navigation("ForbiddenNames");

                    b.Navigation("GuildTasks");

                    b.Navigation("Memes");

                    b.Navigation("PurchasableItems");

                    b.Navigation("Ranks");

                    b.Navigation("SelfRoles");

                    b.Navigation("Subscriptions");

                    b.Navigation("TextReactions");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.PurchasableItem", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.RssFeed", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TheGodfather.Database.Models.TextReaction", b =>
                {
                    b.Navigation("DbTriggers");
                });
#pragma warning restore 612, 618
        }
    }
}
